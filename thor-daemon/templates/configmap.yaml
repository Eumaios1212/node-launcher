apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "thor-daemon.fullname" . }}-scripts
data:
  set-node-keys.sh: |
    #!/bin/sh

    NODE_PUB_KEY=$(echo $SIGNER_PASSWD | thorcli keys show thorchain --pubkey)
    VALIDATOR=$(thord tendermint show-validator)
    printf "$SIGNER_PASSWD\n$SIGNER_PASSWD\n" | thorcli tx thorchain set-node-keys $NODE_PUB_KEY $NODE_PUB_KEY $VALIDATOR --from $SIGNER_NAME --yes --gas auto

  set-ip-address.sh: |
    #!/bin/sh

    NODE_IP_ADDRESS=${1:-$(curl -s http://whatismyip.akamai.com)}
    printf "$SIGNER_PASSWD\n$SIGNER_PASSWD\n" | thorcli tx thorchain set-ip-address $NODE_IP_ADDRESS --from $SIGNER_NAME --yes --gas auto

  set-version.sh: |
    #!/bin/sh

    printf "$SIGNER_PASSWD\n$SIGNER_PASSWD\n" | thorcli tx thorchain set-version --from $SIGNER_NAME --yes --gas auto

  node-status.sh: |
    #!/bin/sh

    source /scripts/core.sh

    API=http://thor-api:1317
    NODE_ADDRESS=$(echo $SIGNER_PASSWD | thorcli keys show $SIGNER_NAME -a)
    NODE_IP=$(curl -s $API/thorchain/nodeaccount/$NODE_ADDRESS | jq -r ".ip_address")
    VERSION=$(curl -s $API/thorchain/nodeaccount/$NODE_ADDRESS | jq -r ".version")
    BOND=$(curl -s $API/thorchain/nodeaccount/$NODE_ADDRESS | jq -r ".bond")
    PREFLIGHT=$(curl -s $API/thorchain/nodeaccount/$NODE_ADDRESS/preflight)
    VAULT=$(curl -s $API/thorchain/pool_addresses | jq -r ".current[0].address")

    echo "THORNode Status"
    echo "Address   $NODE_ADDRESS"
    echo "IP        $NODE_IP"
    echo "Version   $VERSION"
    echo "Bond      $BOND"
    echo "API       http://$NODE_IP:1317"
    echo "RPC       http://$NODE_IP:$THOR_DAEMON_SERVICE_PORT_RPC"
    echo "Midgard   http://$NODE_IP:8080"
    echo "Vault BNB Bond Address $VAULT"
    echo Preflight $PREFLIGHT

    # calculate BNB chain sync progress
    [ "$NET" = "mainnet" ] && BNB_PEER=dataseed1.binance.org || BNB_PEER=data-seed-pre-0-s1.binance.org
    BNB_HEIGHT=$(curl -s $BNB_PEER/status | jq -r ".result.sync_info.latest_block_height" || 1)
    BNB_SYNC_HEIGHT=$(curl -s binance-daemon:$BINANCE_DAEMON_SERVICE_PORT_RPC/status | jq -r ".result.sync_info.index_height")
    BNB_PROGRESS=$(printf "%.2f\n" $(jq -n $BNB_SYNC_HEIGHT/$BNB_HEIGHT*100))

    # calculate THOR chain sync progress
    if [ ! "$PEER" = "" ]; then
      THOR_HEIGHT=$(curl -s $PEER:$THOR_DAEMON_SERVICE_PORT_RPC/status | jq -r ".result.sync_info.latest_block_height")
      THOR_SYNC_HEIGHT=$(curl -s localhost:$THOR_DAEMON_SERVICE_PORT_RPC/status | jq -r ".result.sync_info.latest_block_height")
      THOR_PROGRESS=$(printf "%.2f\n" $(jq -n $THOR_SYNC_HEIGHT/$THOR_HEIGHT*100))
    fi

    echo
    echo Syncing Chain Status
    [ ! "$PEER" = "" ] && echo "THORChain $THOR_PROGRESS% ($THOR_SYNC_HEIGHT/$THOR_HEIGHT blocks)"
    echo "Binance $BNB_PROGRESS% ($BNB_SYNC_HEIGHT/$BNB_HEIGHT blocks)"

  entrypoint.sh: |
    #!/bin/sh

    # allow duplicate peers ip behind load balancer
    sed -i -e "s/allow_duplicate_ip = false/allow_duplicate_ip = true/g" ~/.thord/config/config.toml

    ARGS="--rpc.laddr tcp://0.0.0.0:{{ include "thor-daemon.rpc" . }}"
    [ "$DEBUG" = "true" ] && ARGS="$ARGS --trace --log_level *:debug" || ARGS="$ARGS --log_level main:info,state:debug,*:error"
    printf "$SIGNER_NAME\n$SIGNER_PASSWD\n" | thord start $ARGS

  external-ip.sh: |
    #!/bin/bash
    # ./external-ip.sh <host_network> <service_name> <config_map>
    #
    # Script to extract external ip from a service:
    # If host network returns public ip of the node
    # If LoadBalancer returns external IP either directly or from hostname
    # If ClusterIP return service IP
    # If NodePort returns node IP

    apk add bind-tools

    HOST_NETWORK=$1
    SERVICE=$2
    CONFIGMAP=$3

    if [ "$HOST_NETWORK" = "true" ]; then
      external_ip=$(curl -s http://whatismyip.akamai.com)
    else
      type=$(kubectl get svc $SERVICE -o jsonpath='{.spec.type}')
      external_ip=""

      if [ "$type" = "ClusterIP" ]; then
        external_ip=$(kubectl get svc $SERVICE -o jsonpath='{.spec.clusterIP}')
      elif [ "$type" = "NodePort" ]; then
        external_ip=$(kubectl get nodes --selector=kubernetes.io/role!=master -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
      elif [ "$type" = "LoadBalancer" ]; then
        # Hack TODO remove when this is fixed here https://github.com/kubernetes/kubernetes/issues/82595
        kubectl annotate svc $SERVICE service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled=false --overwrite
        sleep 5
        kubectl annotate svc $SERVICE service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled=true --overwrite

        while [ -z $external_ip ]; do
          echo "Waiting for load balancer external endpoint..."
          external_ip=$(kubectl get svc $SERVICE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z $external_ip ]; then
            hostname=$(kubectl get svc $SERVICE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            [ ! -z $hostname ] && external_ip=$(dig +short $hostname | sort | head -1)
          fi
          [ -z $external_ip ] && sleep 10
        done
      fi
    fi

    kubectl create configmap $CONFIGMAP --from-literal=externalIP=$external_ip --dry-run=client -o yaml | kubectl apply -f -
